#!/usr/bin/python
"""
portconfig is the utility to show and change ECN configuration

usage: portconfig [-h] [-v] [-s] [-f] [-m] [-p PROFILE] [-gmin GREEN_MIN]
                 [-gmax GREEN_MAX] [-ymin YELLOW_MIN] [-ymax YELLOW_MAX]
                 [-rmin RED_MIN] [-rmax RED_MAX] [-vv]

optional arguments:
  -h     --help                show this help message and exit
  -v     --version             show program's version number and exit
  -vv    --verbose             verbose output
  -p     --port                port name
  -s     --speed               port speed in Mbits
  -f     --fec                 port fec mode
  -m     --mtu                 port mtu in bytes
"""
from __future__ import print_function

import re
import sys
import argparse
import swsssdk
import sonic_device_util

PORT_TABLE_NAME = "PORT"
PORT_SPEED_CONFIG_FIELD_NAME = "speed"
PORT_FEC_CONFIG_FIELD_NAME = "fec"
PORT_MTU_CONFIG_FIELD_NAME = "mtu"

class portconfig(object):
    """
    Process aclstat
    """
    def __init__(self, verbose, port):
        self.verbose = verbose

        # Set up db connections
        self.db = swsssdk.ConfigDBConnector()
        self.db.connect()
        # check whether table for this port exists
        port_tables = self.db.get_table(PORT_TABLE_NAME)
        if not port_tables.has_key(port):
            raise Exception("Invalid port specified")

    def list_params(self, port):
        # chack whether table for this port exists
        port_tables = self.db.get_table(PORT_TABLE_NAME)
        if port_tables.has_key(port):
            print(port_tables[port])

    def set_speed(self, port, speed):
        if self.verbose:
            print("Setting speed %s on port %s" % (speed, port))

        cur_brkout_dict = self.db.get_table('BREAKOUT_CFG')
        port_tables = self.db.get_table(PORT_TABLE_NAME)
        if cur_brkout_dict and ("parent_port" in port_tables[port]):
            #get parent port
            parent_port = port_tables[port]["parent_port"]
            speed_list=[]
            cur_brkout_mode = cur_brkout_dict[parent_port]["brkout_mode"]
            tmp_mode = re.split("[/[]", cur_brkout_mode)
            (port_num, tmp_speed) = tmp_mode[0].split("x", 1)
            speed_list.append(tmp_speed)

            if len(tmp_mode) > 1:
                tmp_list = re.split("[,\]]", tmp_mode[1])
                for item in tmp_list:
                    speed_list.append(item)

            conv_speed = "{}G".format(str(speed/1000))
            if conv_speed not in speed_list:
               raise Exception("Can't set the port speed.")

        self.db.mod_entry(PORT_TABLE_NAME, port, {PORT_SPEED_CONFIG_FIELD_NAME: speed})

    def set_fec(self, port, fec):
        if sonic_device_util.get_hwsku() == "Accton-MINIPACK":
            port_speed = self.db.get_entry(PORT_TABLE_NAME, port).get(PORT_SPEED_CONFIG_FIELD_NAME)
            if port_speed == "100000":
                if fec != "rs":
                    raise Exception("fec mode must be rs for 100G speed port in AS8000")
            elif port_speed == "40000":
                if fec != "none":
                    raise Exception("fec mode must be none for 40G speed port in AS8000")
            else:
                raise Exception("Unknown speed config for AS8000")
        if self.verbose:
            print("Setting fec %s on port %s" % (fec, port))
        self.db.mod_entry(PORT_TABLE_NAME, port, {PORT_FEC_CONFIG_FIELD_NAME: fec})

    def set_mtu(self, port, mtu):
        if self.verbose:
            print("Setting mtu %s on port %s" % (mtu, port))
        self.db.mod_entry(PORT_TABLE_NAME, port, {PORT_MTU_CONFIG_FIELD_NAME: mtu})

def main():
    parser = argparse.ArgumentParser(description='Set SONiC port parameters',
                         version='1.0.0',
                         formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-p', '--port', type=str, help='port name (e.g. Ethernet0)', required=True, default=None)
    parser.add_argument('-l', '--list', action='store_true', help='list port parametars', default=False)
    parser.add_argument('-s', '--speed', type=int, help='port speed value in Mbit', default=None)
    parser.add_argument('-f', '--fec', type=str, help='port fec mode value in (none, rs, fc)', default=None)
    parser.add_argument('-m', '--mtu', type=int, help='port mtu value in bytes', default=None)
    parser.add_argument('-vv', '--verbose', action='store_true', help='Verbose output', default=False)
    args = parser.parse_args()

    try:
        port = portconfig(args.verbose, args.port)
        if args.list:
            port.list_params(args.port)
        elif args.speed or args.fec or args.mtu:
            if args.speed:
                port.set_speed(args.port, args.speed)
            if args.fec:
                port.set_fec(args.port, args.fec)
            if args.mtu:
                port.set_mtu(args.port, args.mtu)
        else:
            parser.print_help()
            sys.exit(1)

    except Exception as e:
        print(e.message, file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
